/* ---- file: execute_and_or.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_and_or.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 05:06:26 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:35:19 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"

int	execute_and(t_ast *node, t_shell *shell)
{
	int	status;

	status = 0;
	if (node->left)
		status = execute_ast(node->left, shell);
	if (status == 0 && node->right)
		status = execute_ast(node->right, shell);
	return (status);
}

int	execute_or(t_ast *node, t_shell *shell)
{
	int	status;

	status = 0;
	if (node->left)
		status = execute_ast(node->left, shell);
	if (status != 0 && node->right)
		status = execute_ast(node->right, shell);
	return (status);
}

/* ---- file: execute_ast.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_ast.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 04:37:31 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:50:30 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"
#include "ast.h"

int	execute_ast(t_ast *node, t_shell *shell)
{
	if (!node)
		return (0);
	if (node->type == N_COMMAND)
		return (execute_command(node, shell));
	if (node->type == N_PIPE)
		return (execute_pipe(node, shell));
	if (node->type == N_SUBSHELL)
		return (execute_subshell(node, shell));
	if (node->type == N_SEQUENCE)
		return (execute_sequence(node, shell));
	if (node->type == N_AND)
		return (execute_and(node, shell));
	if (node->type == N_OR)
		return (execute_or(node, shell));
	if (node->type == N_BACKGROUND)
		return (execute_background(node, shell));
	return (0);
}

/* ---- file: execute_background.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_background.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 05:07:27 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:53:07 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"
#include "ast.h"

int	execute_background(t_ast *node, t_shell *shell)
{
	pid_t	pid;

	pid = fork();
	if (pid == 0)
	{
		execute_ast(node->left, shell);
		exit(0);
	}
	if (node->right)
		return (execute_ast(node->right, shell));
	return (0);
}

/* ---- file: execute_builtins.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_builtins.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 06:02:29 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:49:54 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

int	is_builtin(char *cmd)
{
	if (!cmd)
		return (0);
	if (ft_strcmp(cmd, "echo") == 0)
		return (1);
	if (ft_strcmp(cmd, "cd") == 0)
		return (1);
	if (ft_strcmp(cmd, "pwd") == 0)
		return (1);
	if (ft_strcmp(cmd, "export") == 0)
		return (1);
	if (ft_strcmp(cmd, "unset") == 0)
		return (1);
	if (ft_strcmp(cmd, "env") == 0)
		return (1);
	if (ft_strcmp(cmd, "exit") == 0)
		return (1);
	return (0);
}
/*
int	execute_builtin(char **argv, t_shell *shell)
{
	if (ft_strcmp(argv[0], "echo") == 0)
		return (builtin_echo(argv, shell));
	if (ft_strcmp(argv[0], "cd") == 0)
		return (builtin_cd(argv, shell));
	if (ft_strcmp(argv[0], "pwd") == 0)
		return (builtin_pwd(argv, shell));
	if (ft_strcmp(argv[0], "export") == 0)
		return (builtin_export(argv, shell));
	if (ft_strcmp(argv[0], "unset") == 0)
		return (builtin_unset(argv, shell));
	if (ft_strcmp(argv[0], "env") == 0)
		return (builtin_env(argv, shell));
	if (ft_strcmp(argv[0], "exit") == 0)
		return (builtin_exit(argv, shell));
	return (1);
}
*/
/* ---- file: execute_command.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_command.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 05:05:09 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 18:44:20 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"

int	restore_and_return(int stdin_copy, int stdout_copy, int ret)
{
	dup2(stdin_copy, 0);
	dup2(stdout_copy, 1);
	close(stdin_copy);
	close(stdout_copy);
	return (ret);
}

int	apply_all_redirections(t_ast *redir, int in, int out)
{
	while (redir)
	{
		if (apply_redirection(redir) != 0)
			return (restore_and_return(in, out, 1));
		redir = redir->right;
	}
	return (0);
}

int	apply_redirection(t_ast *redir)
{
	int	fd;

	fd = -1;
	if (redir->redir_type == T_HEREDOC)
		fd = handle_heredoc(redir->filename);
	else if (redir->redir_type == T_REDIR_IN)
		fd = open(redir->filename, O_RDONLY);
	else if (redir->redir_type == T_REDIR_OUT)
		fd = open(redir->filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	else if (redir->redir_type == T_APPEND)
		fd = open(redir->filename, O_WRONLY | O_CREAT | O_APPEND, 0644);
	if (fd < 0)
		return (1);
	if (redir->redir_type == T_REDIR_IN || redir->redir_type == T_HEREDOC)
		dup2(fd, STDIN_FILENO);
	else
		dup2(fd, STDOUT_FILENO);
	close(fd);
	return (0);
}

int	execute_command(t_ast *node, t_shell *shell)
{
	int		stdin_copy;
	int		stdout_copy;
	int		status;
	char	*path;

	if (!node || !node->argv || !node->argv[0])
		return (0);
	stdin_copy = dup(0);
	stdout_copy = dup(1);
	if (apply_all_redirections(node->right, stdin_copy, stdout_copy))
		return (1);
	/*
	if (is_builtin(node->argv[0]))
	{
		status = execute_builtin(node->argv, shell);
		return (restore_and_return(stdin_copy, stdout_copy, status));
	}
	*/
	path = find_in_path(node->argv[0], shell->env);
	if (!path)
	{
		ft_dprintf(2, "minishell: %s: command not found\n", node->argv[0]);
		return (restore_and_return(stdin_copy, stdout_copy, 127));
	}
	status = fork_execve_with_path(path, node->argv, shell);
	free(path);
	return (restore_and_return(stdin_copy, stdout_copy, status));
}

/* ---- file: execute_fork_execve.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_fork_execve.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 05:11:35 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 20:39:34 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"
#include "env.h"

static void	child_execve(char *path, char **argv, char **envp)
{
	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_DFL);
	execve(path, argv, envp);
	free_strtab(envp);
	ft_dprintf(2, "minishell: %s: execution error\n", argv[0]);
	exit(126);
}

static void	handle_child_signal(int status)
{
	if (WIFSIGNALED(status))
	{
		if (WTERMSIG(status) == SIGINT)
			write(1, "\n", 1);
		else if (WTERMSIG(status) == SIGQUIT)
			write(1, "Quit (core dumped)\n", 19);
	}
}

static int	handle_wait_status(int status, t_shell *shell)
{
	if (WIFEXITED(status))
		shell->exit_status = WEXITSTATUS(status);
	else if (WIFSIGNALED(status))
		shell->exit_status = 128 + WTERMSIG(status);
	handle_child_signal(status);
	return (shell->exit_status);
}

int	fork_execve_with_path(char *path, char **argv, t_shell *shell)
{
	pid_t	pid;
	int		status;
	char	**envp;

	envp = env_list_to_envp(shell->env);
	if (!envp)
		return (127);
	restore_vquit(); // <- Antes de fork
	pid = fork();
	if (pid < 0)
	{
		ft_dprintf(2, "minishell: fork error\n");
		free_strtab(envp);
		return (1);
	}
	if (pid == 0)
		child_execve(path, argv, envp); // handler SIGINT/SIGQUIT = SIG_DFL
	free_strtab(envp);
	waitpid(pid, &status, 0);
	return (handle_wait_status(status, shell));
}


/* ---- file: execute_heredocs.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_heredocs.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 05:58:04 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:54:26 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

static int	open_heredoc_pipe(int *pipe_fd)
{
	if (pipe(pipe_fd) == -1)
		return (1);
	return (0);
}

static int	read_heredoc_lines(const char *delim, int write_fd)
{
	char	*line;

	while (1)
	{
		ft_putstr_fd("> ", 1);
		line = get_next_line(0);
		if (!line)
			break;
		if (ft_strcmp(line, (char *)delim) == 0)
		{
			free(line);
			break;
		}
		ft_putstr_fd(line, write_fd);
		free(line);
	}
	return (0);
}

int	handle_heredoc(const char *delim)
{
	int	pipe_fd[2];

	if (open_heredoc_pipe(pipe_fd))
		return (-1);
	read_heredoc_lines(delim, pipe_fd[1]);
	close(pipe_fd[1]);
	return (pipe_fd[0]);
}

/* ---- file: execute_one_command.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_one_command.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/11 13:20:33 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:54:43 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"
#include "parser.h"

/*
** Ejecuta un solo comando, como en 'bash -c "comando"'.
** command_str: la cadena con el comando a ejecutar
** envp: el entorno de la minishell
*/
void	execute_one_command(char *command_str, t_shell *shell)
{
	char	*line;

	shell->is_one_command = 1;
	line = NULL;
	if (!command_str)
		return ;
	line = ft_strdup(command_str);
	if (!line)
		return ;
	if (shell->line)
		clean_line(&shell->line);
	shell->line = line;
	parse_and_execute(shell);
	cleanup_loop(shell);
}

/* ---- file: execute_pipe.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_pipe.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 05:08:40 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:53:24 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"
#include "ast.h"

static void	close_pipe(int *fd)
{
	close(fd[0]);
	close(fd[1]);
}

static int	child_left(t_ast *node, t_shell *shell, int *pipe_fd)
{
	if (dup2(pipe_fd[1], STDOUT_FILENO) == -1)
		return (1);
	close(pipe_fd[0]);
	close(pipe_fd[1]);
	exit(execute_ast(node->left, shell));
	return (0);
}

static int	child_right(t_ast *node, t_shell *shell, int *pipe_fd)
{
	if (dup2(pipe_fd[0], STDIN_FILENO) == -1)
		return (1);
	close(pipe_fd[1]);
	close(pipe_fd[0]);
	exit(execute_ast(node->right, shell));
	return (0);
}

static int	wait_both(pid_t pid1, pid_t pid2)
{
	int	status;

	waitpid(pid1, NULL, 0);
	waitpid(pid2, &status, 0);
	if (WIFEXITED(status))
		return (WEXITSTATUS(status));
	return (1);
}

int	execute_pipe(t_ast *node, t_shell *shell)
{
	int		pipe_fd[2];
	pid_t	pid1;
	pid_t	pid2;

	if (pipe(pipe_fd) == -1)
		return (1);
	pid1 = fork();
	if (pid1 == -1)
	{
		close_pipe(pipe_fd);
		return (1);
	}
	if (pid1 == 0)
		child_left(node, shell, pipe_fd);
	pid2 = fork();
	if (pid2 == -1)
	{
		close_pipe(pipe_fd);
		return (1);
	}
	if (pid2 == 0)
		child_right(node, shell, pipe_fd);
	close(pipe_fd[0]);
	close(pipe_fd[1]);
	return (wait_both(pid1, pid2));
}

/* ---- file: execute_script.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_script.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/11 12:22:19 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 04:57:35 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void clean_line(char **line)
{
	if (*line)
	{
		free(*line);
		*line = NULL;
	}
}

void	execute_script(const char *filename, t_shell *shell)
{
	int		fd;
	char	*line;

	shell->is_script = 1;
	fd = open(filename, O_RDONLY);
	if (fd < 0)
	{
		ft_dprintf(2, "minishell: cannot open script file: %s\n", filename);
		return ;
	}
	line = get_next_line(fd);
	while (line)
	{
		if (shell->line)
			clean_line(&shell->line);
		shell->line = line;
		parse_and_execute(shell);
		cleanup_loop(shell);
		line = get_next_line(fd);
	}
	close(fd);
}

/* ---- file: execute_sequence.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_sequence.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 05:05:58 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:52:51 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"
#include "ast.h"

int	execute_sequence(t_ast *node, t_shell *shell)
{
	int	status;

	status = 0;
	if (node->left)
		status = execute_ast(node->left, shell);
	if (node->right)
		status = execute_ast(node->right, shell);
	return (status);
}

/* ---- file: execute_subshell.c ---- */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute_subshell.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acoronad <acoronad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/17 05:09:12 by acoronad          #+#    #+#             */
/*   Updated: 2025/06/17 07:52:09 by acoronad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "exec.h"
#include "ast.h"

int	execute_subshell(t_ast *node, t_shell *shell)
{
	pid_t	pid;
	int		status;

	pid = fork();
	if (pid < 0)
		return (1);
	if (pid == 0)
	{
		execute_ast(node->left, shell);
		exit(shell->exit_status);
	}
	else
	{
		waitpid(pid, &status, 0);
		if (WIFEXITED(status))
			shell->exit_status = WEXITSTATUS(status);
		else if (WIFSIGNALED(status))
			shell->exit_status = 128 + WTERMSIG(status);
	}
	return (shell->exit_status);
}

